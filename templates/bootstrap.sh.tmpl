#!/usr/bin/env bash
set -eou pipefail

### 1. Download Backups

max_attempts=20
delay=30

download_with_retries() {
  local bucket_name=$1
  local bucket_namespace=$2
  local download_dir=$3

  attempt=1
  # Retry can be required if startup happens before Terraform can finish updating the IAM dynamic group membership conditions
  while (( attempt <= max_attempts )); do
    echo "Attempt $attempt of $max_attempts for $bucket_name in $bucket_namespace to $download_dir"

    set +e
    oci os object bulk-download --namespace "$bucket_namespace" --bucket-name "$bucket_name" --download-dir "$download_dir" --auth instance_principal
    cmd_status=$?
    set -e

    if [ $cmd_status -eq 0 ]; then
      return 0
    fi

    if (( attempt >= max_attempts )); then
      echo "Command failed after $max_attempts attempts"
      exit 1
    fi

    echo "Downloading backups failed, waiting for $delay seconds..."
    sleep $delay

    (( attempt++ ))
  done
}

download_with_retries "${freshrss_bucket_name}" "${freshrss_bucket_namespace}" /backups
download_with_retries "${planka_bucket_name}" "${planka_bucket_namespace}" /opt/planka/backups

### 2. Restore backups and setup freshrss
freshrss_restore --latest
cd /opt/freshrss && sudo -u www-data ./cli/reconfigure.php --base-url https://${freshrss_base_url} --title ${freshrss_subdomain}

### 3. Setup Nitter
sudo sed -i 's#\(hostname = \).*#\1"${nitter_fqdn}"#' /opt/nitter/nitter.conf
sudo sed -i 's#\(replaceTwitter = \).*#\1"${nitter_fqdn}"#' /opt/nitter/nitter.conf
systemctl restart nitter

### 3. Setup Planka
cd /opt/planka && ./docker-restore.sh backups/$(ls /opt/planka/backups | sort -r | head -n 1) && docker compose restart
